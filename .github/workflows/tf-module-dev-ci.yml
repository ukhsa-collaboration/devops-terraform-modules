name: "Terraform module: dev"

on:
  push:
    branches:
      - dev
    paths:
      - 'terraform-modules/**/*.tf'
  pull_request:
    branches:
      - dev
    paths:
      - 'terraform-modules/**/*.tf'

env:
  TERRAFORM_VERSION: "1.7.4"
  TERRAFORM_DOCS_VERSION: "v0.17.0"
  PYTHON_VERSION: "3.12"
  CHECKOV_VERSION: "3.2.28"
  TF_MODULE_DIR: "terraform-modules" 
  ENVIRONMENT: "dev"

jobs:
  pre-build:
    name: Pre-build steps
    runs-on: ubuntu-latest
    outputs:
      is_pull_request: ${{ steps.check_event.outputs.is_pr }}
      tf_module_dirs: ${{ steps.get_tf_module_dirs.outputs.tf_module_directories }}
      changed_directories: ${{ steps.identify_changed_folders.outputs.changed_tf_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check event type
        id: check_event
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Get all Terraform module directories
        id: get_tf_module_dirs
        run: |
          module_dirs=$(find "${{ env.TF_MODULE_DIR }}" -name '*.tf' -print | awk -F/ '{OFS="/"; $NF=""; print $0}' | sort -u | xargs)
          echo "Module directories: $module_dirs"
          echo "tf_module_directories=$module_dirs" >> $GITHUB_OUTPUT

      - name: Identify changed Terraform folders from 'dev' branch
        id: identify_changed_folders
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD | grep '\.tf$' | tr '\n' ' ')
          changed_dirs=()
          echo 'Getting directories with changes...'
          for file in $changed_files; do
              dir=$(dirname "$file")
              echo "  - $dir"
              if [[ -d "$dir" ]]; then
                  changed_dirs+=($dir)
              fi
          done
          
          # Get unique directories
          IFS=" " read -r -a changed_dirs <<< "$(tr ' ' '\n' <<< "${changed_dirs[@]}" | sort -u | tr '\n' ' ')"
          
          echo "Existing directories with changes: ${changed_dirs[@]}"
          echo "changed_tf_dirs=${changed_dirs[@]}" >> $GITHUB_OUTPUT

  terraform-lint-and-validate:
    name: Terraform lint and validation
    needs: pre-build
    runs-on: ubuntu-latest
    if: ${{ needs.pre-build.outputs.changed_directories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts 

      - name: Terraform initialize
        run: |
          changed_dirs=(${{ needs.pre-build.outputs.changed_directories }})
          for dir in "${changed_dirs[@]}"; do
            echo "Initialising Terraform in directory: $dir"
            (cd "$dir" && terraform init) || {
              echo "Failed to initialise: $dir. Please check 'terraform init' runs."
              exit 1
            }
          done

      - name: Check Terraform format
        run: |
          changed_dirs=(${{ needs.pre-build.outputs.changed_directories }})
          for dir in "${changed_dirs[@]}"; do
            echo "Checking Terraform format in directory: $dir"
            (cd "$dir" && terraform fmt -check) || {
              echo "Formatting issues found in $dir. Please run 'terraform fmt -recursive' to fix them."
              exit 1
            }
          done

      - name: Validate Terraform
        run: |
          changed_dirs=(${{ needs.pre-build.outputs.changed_directories }})
          for dir in "${changed_dirs[@]}"; do
            echo "Validating Terraform in directory: $dir"
            (cd "$dir" && terraform validate)
          done

      # - name: Terraform Plan
      #   run: |
      #     for dir in (${{ needs.pre-build.outputs.changed_directories }}); do
      #       cd $dir && terraform plan
      #     done

  terraform-security-scan:
    name: Terraform security scan
    needs: pre-build
    runs-on: ubuntu-latest
    if: ${{ needs.pre-build.outputs.changed_directories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Checkov
        run: pip install "checkov==${{ env.CHECKOV_VERSION }}"

      - name: Run Checkov
        run: |
          changed_dirs=(${{ needs.pre-build.outputs.changed_directories }})
          for dir in "${changed_dirs[@]}"; do
            echo "Running Checkov on directory: $dir"
            checkov -d "$dir" --download-external-modules true
          done
          
  release_module:
    name: Release module
    needs: [ terraform-lint-and-validate, terraform-security-scan, pre-build ]
    if: ${{ needs.pre-build.outputs.is_pull_request == 'false' }}
    runs-on: ubuntu-latest   
    steps:  
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release module
        run: |
          increment_version() {
            local version=$1
            local major minor patch
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1)) # Increment the patch number
            echo "$major.$minor.$patch"
          }
          
          get_latest_version() {
              local module_tag=$1
              local latest_tag=$(git tag --list "${module_tag}/v*" | sort -V | tail -n1)
              echo "${latest_tag##*/}"
          }

          # Set changed dirs
          changed_dirs=(${{ needs.pre-build.outputs.changed_directories }})

          # Set environment
          environment="${{ env.ENVIRONMENT }}"
          environment="${environment^^}"

          # Process module version tags
          for dir in "${changed_dirs[@]}"; do
            # Replace modules directory with 'dev/TF'
            dir=$(echo "$dir" | sed "s|${{ env.TF_MODULE_DIR }}|$environment/TF|")

            latest_version=$(get_latest_version "$dir")
            if [ -z "$latest_version" ]; then
                echo "No existing tags found for $dir. Starting with version v0.0.1"
                new_version="v0.0.1"
            else
                new_version=$(increment_version "$latest_version")
            fi

            # Create new tag
            new_tag="${dir}/${new_version}"
            echo "New version: $new_tag"

            # Tag Git
            git tag "$new_tag" && git push origin "$new_tag"
          done
