name: Terraform module feature

on:
  push:
    branches:
      - feature/*
    paths:
      - 'terraform-modules/**/*.tf'

env:
  TERRAFORM_VERSION: "1.7.4"
  TERRAFORM_DOCS_VERSION: "v0.17.0"
  PYTHON_VERSION: "3.12"
  CHECKOV_VERSION: "3.2.26"

jobs:
  pre-build:
    name: pre-build
    runs-on: ubuntu-latest
    outputs:
      is_pull_request: ${{ steps.check_event.outputs.is_pr }}
      changed_directories: ${{ steps.identify_changed_folders.outputs.changed_tf_dirs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check event type
        id: check_event
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Identify changed Terraform folders from 'dev' branch
        id: identify_changed_folders
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD | grep '\.tf$' | tr '\n' ' ')
          changed_dirs=""
          for file in $changed_files; do
              dir=$(dirname "$file")
              if [ -d "$dir" ]; then
                  changed_dirs+=$dir$'\n'
              fi
          done
          echo "Directories with changes: $changed_dirs"
          echo "changed_tf_dirs=$changed_dirs" >> $GITHUB_OUTPUT

  terraform-lint-and-validate:
    name: Terraform lint and validation
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts 

      - name: Terraform initialize
        run: |
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"
          for dir in $changed_dirs; do
            (cd $dir && terraform init)
          done

      - name: Check Terraform format
        run: |
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"
          for dir in $changed_dirs; do
            # Change to each directory and check formatting
            (cd "$dir" && terraform fmt -check) || {
              echo "Formatting issues found in $dir. Please run 'terraform fmt -recursive' to fix them."
              exit 1
            }
          done

      - name: Validate Terraform
        run: |
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"
          for dir in $changed_dirs; do
            (cd $dir && terraform validate)
          done

      # - name: Terraform Plan
      #   run: |
      #     for dir in ${{ needs.pre-build.outputs.changed_directories }}; do
      #       cd $dir && terraform plan
      #     done

  terraform-security-scan:
    name: Terraform security scan
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Checkov
        run: pip install "checkov==${{ env.CHECKOV_VERSION }}"

      - name: Run Checkov
        run: |
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"
          for dir in $changed_dirs; do
            echo "Running Checkov on directory: $dir"
            checkov -d $dir --download-external-modules true || true
          done

  # Generates Terraform module README.mds
  generate-docs:
    name: Generate Terraform docs
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform docs
        run: |
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-${{ env.TERRAFORM_DOCS_VERSION }}-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/terraform-docs 
          rm -rfv terraform-docs.tar.gz

      - name: Update module READMEs
        run: |
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"
          for dir in $changed_dirs; do
            rm -fv $dir/README.md # Remove old README.md
            terraform-docs markdown table --output-file README.md --output-mode inject $dir
          done

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add .
          git commit -m "Automated: Update Terraform documentation" -a || echo "No changes to commit"
          git push
