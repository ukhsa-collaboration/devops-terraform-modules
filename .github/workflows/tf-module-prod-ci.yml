name: "Terrform module: prod"

on:
  push:
    branches:
      - prod
    paths:
      - 'terraform-modules/**/*.tf'
  pull_request:
    branches:
      - prod
    paths:
      - 'terraform-modules/**/*.tf'

env:
  TERRAFORM_VERSION: "1.7.4"
  TERRAFORM_DOCS_VERSION: "v0.17.0"
  PYTHON_VERSION: "3.12"
  CHECKOV_VERSION: "3.2.26"
  TF_MODULE_DIR: "terraform-modules" 
  ENVIRONMENT: "dev"

jobs:
  pre-build:
    name: pre-build
    runs-on: ubuntu-latest
    outputs:
      is_pull_request: ${{ steps.check_event.outputs.is_pr }}
      tf_module_dirs: ${{ steps.get_tf_module_dirs.outputs.tf_module_directories }}
      changed_directories: ${{ steps.identify_changed_folders.outputs.changed_tf_dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check event type
        id: check_event
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Get all Terraform module directories
        id: get_tf_module_dirs
        run: |
          module_dirs=$(find "${{ env.TF_MODULE_DIR }}" -name '*.tf' -print | awk -F/ '{OFS="/"; $NF=""; print $0}' | sort -u | xargs)
          echo "Module directories: $module_dirs"
          echo "tf_module_directories=$module_dirs" >> $GITHUB_OUTPUT

      - name: Identify changed Terraform folders from 'dev' branch
        id: identify_changed_folders
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD | grep '\.tf$' | tr '\n' ' ')
          changed_dirs=""
          for file in $changed_files; do
              dir=$(dirname "$file")
              if [ -d "$dir" ]; then
                  changed_dirs+=$dir$'\n'
              fi
          done
          echo "Directories with changes: $changed_dirs"
          echo "changed_tf_dirs=$changed_dirs" >> $GITHUB_OUTPUT

  release_module:
    name: Release module
    needs: [ pre-build ]
    if: ${{ needs.pre-build.outputs.is_pull_request == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release module
        run: |
          increment_version() {
            local version=$1
            local major minor patch
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1)) # Increment the patch number
            echo "$major.$minor.$patch"
          }
          
          get_latest_version() {
              local module_tag=$1
              local latest_tag=$(git tag --list "${module_tag}/v*" | sort -V | tail -n1)
              echo "${latest_tag##*/}"
          }
          
          # Set changed dirs
          changed_dirs="${{ needs.pre-build.outputs.changed_directories }}"

          # Set environment
          environment="${{ env.ENVIRONMENT }}"
          environment="${environment^^}"

          # Process module version tags
          for dir in $changed_dirs; do
            # Replace 'terraform-modules' with 'dev/TF' in directory
            dir=$(echo "$dir" | sed "s|${{ env.TF_MODULE_DIR }}|$environment/TF|")

            latest_version=$(get_latest_version $dir)
            if [ -z "$latest_version" ]; then
                echo "No existing tags found for $dir. Starting with version v0.0.1"
                new_version="v0.0.1"
            else
                new_version=$(increment_version $latest_version)
            fi

            # Create new tag
            new_tag="${dir}/${new_version}"
            echo "New version: $new_tag"

            # Tag Git
            git tag $new_tag && git push origin $new_tag
          done
